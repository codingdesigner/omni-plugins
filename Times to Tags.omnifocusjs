/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Gwen Wendell",
	"identifier": "com.GwenWendell.timesToTags",
	"version": "1.0",
	"description": "Times to Tags",
	"label": "Times to Tags",
	"shortLabel": "Times to Tags"
}*/

(() => {
  function updateTask(task, addTag, removeTags) {
    if (!task.completed) {
      task.removeTags(removeTags);
      if (addTag) {
        task.addTag(addTag);
      }
    }
  }

  const action = new PlugIn.Action(function (selection, sender) {
    const tagNamesPlugin = PlugIn.find("com.GwenWendell.timeTags");
    if (tagNamesPlugin == null) {
      throw new Error("Library plug-in not installed.");
    }
    // var libs = tagNamesPlugin.libraries;
    // var libNames = libs.map((lib) => lib.name);
    const tagNamesLibrary = tagNamesPlugin.library("timeTags");

    selection.tasks.forEach(function (task) {
      const timeTagNames = tagNamesLibrary.timeTagNames();

      timeTagNames.forEach((value, key) => {
        flattenedTags.byName(value) || new Tag(value);
      });
      const estimation = (task.estimatedMinutes) ? task.estimatedMinutes : 0;
      const timeTagName = timeTagNames.get(estimation);
      timeTagNames.delete(estimation);

      const timeTagToAdd = timeTagName
        ? flattenedTags.byName(timeTagName)
        : null;

      const timeTagsToRemove = [];
      timeTagNames.forEach((value, key) => {
        timeTagsToRemove.push(flattenedTags.byName(value));
      });

      updateTask(task, timeTagToAdd, timeTagsToRemove);
    });
  });

  action.validate = function (selection, sender) {
    // validation code
    return selection.tasks.length > 0;
  };

  return action;
})();
